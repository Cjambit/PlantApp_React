{"version":3,"sources":["components/Documentation.js","StockContext.js","components/ContractorView/Form.js","components/ContractorView/FilterButton.js","components/ContractorView/Stock.js","components/ContractorView/StockList.js","components/CrypList.js","components/CrypLoading.js","components/Crypto.js","components/ContractorView/Total.js","components/ContractorView/Pay.js","components/ContractorView/InvoiceForm.js","components/ContractorView/Home.js","components/ClientView/ClientHome.js","components/Navbar.js","components/Home.js","App.js","index.js"],"names":["Documentation","StockContext","createContext","StockProvider","props","useState","id","species","reqKey","contract","bundle","stocks","setStock","Provider","value","children","Form","inputs","setFormInput","useContext","handleChange","e","name","target","values","onSubmit","preventDefault","addInvoice","type","className","autoComplete","blockName","onChange","planted","map","stock","rate","variant","FilterButton","isPressed","onClick","setFilter","Stock","StockList","CrypList","cur","parseFloat","time","eth","parseInt","btcDue","ethDue","toFixed","CrypLoading","Component","isLoading","style","textAlign","fontSize","Crypto","ListLoading","loading","cryptoState","setCryptoState","timeState","setTimeState","ethState","setEthState","useEffect","fetch","then","res","json","data","amount","iso","Total","dollarDueRounded","Pay","isEditing","setEditing","newInputs","setNewInputs","due","editFieldRef","useRef","editButtonRef","wasEditing","ref","current","usePrevious","editingTemplate","editInvoice","htmlFor","viewTemplate","toggleInvoiceSubmitted","deleteInvoice","focus","FILTER_MAP","All","Active","invoice","submitted","Submitted","FILTER_NAMES","Object","keys","InvoiceForm","invoices","setInvoices","filter","remainingInvoices","newName","newPlanted","newRate","editedInvoiceList","updatedInvoices","localStorage","getItem","JSON","parse","setItem","stringify","invoiceList","filterList","invoicesNoun","length","headingText","listHeadingRef","prevInvoiceLength","newInvoice","nanoid","clear","tabIndex","role","ContractorHome","ClientHome","Navbar","to","Home","underline","App","path","component","exact","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73e7085d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Documentation(){\r\n    return(\r\n    <div>\r\n    <h1>Documentation Page</h1>\r\n    <h2>Site Use Directions:</h2>\r\n    <p>This site is intented for the use by  reforestation (tree planting) contractors to compile biling information on a block (worksite) basis and submit an invoice for their client to receive and pay</p>\r\n    <h3>Home Portal</h3>\r\n    <p>The home landing page of the web application presents the user with an option to access the Client or Contractor Portals. The Contractor portal is intended for the drafting and submission of invoices. The Client portal is intended for the client to access submitted invoices.</p>\r\n    <h3>Contractor Home</h3>\r\n    <p>Under heading \"Start a New Invoice, the user is first presented with a form to input a set of information requirements to draft a new Invoice. Upon clicking on Draft invoice, the form input is compiled and passed to the invoice list below.</p>\r\n    <h3>Current Invoices</h3>\r\n    <p>The current invoice secetion presents the user with a list of current invoices. Each invoice is identified by the blockname \"worksite\".</p>\r\n    <ul>\r\n        <li>Tree Rate. Represents to contractual rate per tree for the specific cut block that the client is to pay the contractor upon successful work completion</li>\r\n        <li>Total Planted. Represents the total amount of trees planted on a particular site</li>\r\n        <li>Amount Due in CAD. Represents the total number of trees planted multiplied by the tree rate (rate input *.10)</li>\r\n        <li>Current Bitcoin Rate. This shows the spot price of bitcoin generated by Coinbase's API.</li>\r\n        <li>Current ETH Rate. This shows the spot price of ether generated by Coinbase's API.</li>\r\n        <li>Time of price quotes. This shows the time stamp received from coinbase API to verify time of quote.</li>\r\n        \r\n  </ul>\r\n  <h4>Current Invoice funtcionality defined by button</h4>\r\n        <li>Submit Invoice. By clicking this, the invoice is marked as submitted. It can will then be sorted and appear when selected \"Show submitted Invoices\"</li>\r\n        <li>Edit Invoice. By clicking this, the user is presented with an option to edit the invoice name or the total planted</li>\r\n        <li>Mark as paid and remove. By clicking this, the invoice is deleted from the form</li>\r\n    <h4>Sort Bar</h4>\r\n    <ul>\r\n        <li> Show all invoices. clicking this shows all the invioces to the user</li>\r\n        <li>Show active invoices. Clicking this sorts the invoices so that the UI only shows active invoices</li>\r\n        <li>Show submitted Invoices. Clicking this sorts the invoices for only those selected for submit. </li>\r\n        <li>Clear all invoices. Deletes all the invoices regardless of active or submitted.</li>\r\n    </ul>\r\n    <h3>Sources</h3>\r\n    <ul>\r\n        <li>Coinbase</li>\r\n        <li>Class Assignment Todo app for sorting and filtering methods</li>\r\n        <li>Assignment 6 for data fetching methods</li>\r\n    </ul>\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Documentation;","import React, {useState, createContext} from \"react\";\r\n//create context \r\nexport const StockContext = createContext();\r\n\r\nexport const StockProvider=(props)=>{\r\n    const [stocks, setStock] = useState([\r\n        {\r\n            id: 1,\r\n            species: 'pli',\r\n            reqKey: 'DM045',\r\n            contract: 'FSJ',\r\n            bundle: '20'\r\n        },\r\n        {\r\n            id: 2,\r\n            species: 'Sx',\r\n            reqKey: 'DMK023',\r\n            contract: 'Williams Lake',\r\n            bundle: '15'\r\n        },\r\n        {\r\n            id: 3,\r\n            species: 'Fdi',\r\n            reqKey: 'JK045',\r\n            contract: 'Quesnel',\r\n            bundle: '10'\r\n        },\r\n    ]);\r\n\r\n    //{props.children} renders all child components\r\n    return(\r\n        <StockContext.Provider value={[stocks, setStock]}>\r\n            {props.children}\r\n        </StockContext.Provider>\r\n    );\r\n}\r\n\r\n    ","import React, { useState, useContext } from \"react\";\r\nimport {StockContext} from \"../../StockContext\"\r\nimport Button from '@mui/material/Button';\r\n\r\nfunction Form(props) {\r\n    const [inputs, setFormInput] = useState('');\r\n    const [stocks, setStock] = useContext(StockContext);\r\n\r\n    function handleChange(e) {\r\n        const name = (e.target.name);\r\n        const value = (e.target.value);\r\n        setFormInput (values=>({...values,[name]:value}));\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.addInvoice(inputs);\r\n    }\r\n\r\n   return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>\r\n        <label>\r\n          Start a new Invoice\r\n        </label>\r\n      </h2>\r\n      <label>\r\n        Block Name\r\n      </label>&nbsp;\r\n      <input\r\n        type=\"text\"\r\n        id=\"block-input\"\r\n        className=\"block-input\"\r\n        name=\"blockName\"\r\n        autoComplete=\"off\"\r\n        value={inputs.blockName}\r\n        onChange={handleChange}\r\n      />\r\n      <br />\r\n      <label>\r\n        Total Planted\r\n      </label>&nbsp;\r\n      <input\r\n        type=\"number\"\r\n        id=\"planted-input\"\r\n        className=\"planted-input\"\r\n        name=\"planted\"\r\n        autoComplete=\"off\"\r\n        value={inputs.planted}\r\n        onChange={handleChange}\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>\r\n        Stock Type\r\n      </label>&nbsp;\r\n      <select id=\"species-input\"\r\n        className=\"species-input\"\r\n        name=\"species\"\r\n        value={inputs.species}\r\n        onChange={handleChange}>\r\n        {stocks.map(stock=>(\r\n          <option value={stock.species} key={stock.id}>{stock.species}</option>\r\n        ))}</select>\r\n      <br />\r\n      <label>\r\n        Tree Rate (cents/tree)\r\n      </label>&nbsp;\r\n      <input\r\n        type=\"number\"\r\n        id=\"rate-input\"\r\n        className=\"rate-input\"\r\n        name=\"rate\"\r\n        autoComplete=\"off\"\r\n        value={inputs.rate}\r\n        onChange={handleChange}\r\n      />  \r\n      <br />\r\n      <button type=\"submit\" className=\"draft\" variant=\"contained\">\r\n        Draft Invoice\r\n      </button>\r\n      <br />\r\n      <br />\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button type=\"btn\" className=\"filter\" aria-pressed={props.isPressed} onClick={() => props.setFilter(props.name)}>\r\n      <span className=\"hide\">Show </span>\r\n      <span>{props.name} </span>\r\n      <span className=\"hide\"> Invoices</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;","import React, {useState} from \"react\";\r\n\r\nconst Stock = ({species,reqKey,contract}) => {\r\n    \r\n    return(\r\n        <div>\r\n            <h3>{species}&nbsp;{reqKey}&nbsp;Contract: {contract}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stock;","import React, {useState, useContext} from \"react\";\r\nimport Stock from \"./Stock\";\r\nimport {StockContext} from \"../../StockContext\"\r\n\r\nconst StockList = () => {\r\n    const [stocks, setStock] = useContext(StockContext);\r\n    return(\r\n        \r\n        <div className=\"stockSelection\">\r\n            <h2>Legend of Available Stocks:</h2>\r\n            {stocks.map(stock=>(\r\n            <Stock species={stock.species} reqKey={stock.reqKey} key={stock.id} contract={stock.contract}/>\r\n        ))}</div>\r\n    );\r\n}\r\n\r\nexport default StockList;","import React from 'react';\r\n\r\nconst CrypList = (props) => {\r\n  const cur = parseFloat(props.cur);\r\n  const time = props.time;\r\n  const eth = parseFloat(props.eth);\r\n  const rate = parseInt(props.rate);\r\n  const planted = parseInt(props.planted);\r\n  const exchangeB = 1/cur;\r\n  const exchangeE = 1/eth;\r\n  const btcDue = (.01*rate)*planted*exchangeB;\r\n  const ethDue = (.01*rate)*planted*exchangeE;\r\n  //toFixed(2);\r\n//if (!cur || cur.length === 0) return <p className=\"red-alert\">Currency data not currently available.</p>;\r\n  \r\nreturn (\r\n    <div className=\"blockchain-price-list\">\r\n      <h3>Current Bitcoin Rate in CAD:  ${cur.toFixed(2)}</h3>\r\n      <h3>Amount Due in BTC:  {btcDue}</h3>\r\n      <h3>Current Ether Rate in CAD:  ${eth.toFixed(2)}</h3>\r\n      <h3>Amount Due in ETH:  {ethDue}</h3>\r\n      <h4>Time of price quotes: {time}</h4>\r\n      {/* only refreshing when page is loaded */}\r\n    </div>\r\n  );\r\n};\r\nexport default CrypList;","import React from 'react';\r\n\r\nfunction CrypLoading(Component) {\r\n    return function whileLoadingComponent({ isLoading, ...props}) {\r\n        if (!isLoading) return <Component {...props} />;\r\n        return (\r\n            <p style={{ textAlign: 'centre', fontSize: '30px'}}>\r\n                Currency data is loading...\r\n            </p>\r\n        );\r\n    };\r\n}\r\nexport default CrypLoading; \r\n","import React, {useEffect, useState} from 'react';\r\nimport CrypList from './CrypList';\r\nimport CrypLoading from './CrypLoading';\r\nimport axios from 'axios';\r\n\r\nfunction Crypto(props){\r\n    const ListLoading = CrypLoading(CrypList);\r\n    const[cryptoState, setCryptoState]=useState({\r\n        loading: false,\r\n        cur: null,\r\n    }\r\n    );\r\n    const[timeState, setTimeState]=useState({\r\n        loading: false,\r\n        time: null,\r\n    }\r\n    );\r\n    const[ethState, setEthState]=useState({\r\n        loading: false,\r\n        eth: null,\r\n    }\r\n    );\r\n    //Retrive bitcoin spot price in CAD from coinbase using fetch\r\n    useEffect(()=>{\r\n        setCryptoState({loading: true});//going to load data from external api \r\n        const apiUrl = 'https://api.coinbase.com/v2/prices/BTC-CAD/spot';\r\n        fetch(apiUrl)\r\n            .then((res)=> res.json()) //returns a promise converted to .json\r\n            .then((cur)=> {\r\n                setCryptoState({loading:false, cur: cur.data.amount});\r\n            });\r\n    },[setCryptoState]);\r\n    //axios retrieve bitcoin spt price in CAD from coinbase \r\n    // useEffect( () => {\r\n    // async function fetchData() {\r\n    //     setCryptoState({ loading: true });\r\n    //     //make a get request\r\n    //     const apiUrl = 'https://api.coinbase.com/v2/prices/BTC-CAD/spot';\r\n    //     const response = await axios.get(apiUrl);\r\n    //     setCryptoState({ loading: false, cur: response.data.amount})\r\n    //   }\r\n    //   fetchData();\r\n    // }, [setCryptoState])\r\n    //using Axios\r\n    // useEffect(()=>{\r\n    //     setCryptoState({loading: true});//going to load data from external api \r\n    //     const apiUrl = 'https://api.coinbase.com/v2/prices/spot?currency=CAD';\r\n    //     axios.get(apiUrl).then((cur)=>{\r\n    //         setCryptoState({loading:false, cur: (cur.data)});\r\n    //     });\r\n    // },[setCryptoState]);\r\n         \r\n    //Retrieve a time stamp associated with price estimate from coinbase\r\n    useEffect(()=>{\r\n        setTimeState({loading: true});//going to load data from external api \r\n        const apiUrlTime = 'https://api.coinbase.com/v2/time';\r\n        fetch(apiUrlTime)\r\n            .then((res)=> res.json()) //returns a promise converted to .json\r\n            .then((time)=> {\r\n                setTimeState({loading:false, time: time.data.iso});\r\n            });\r\n    },[setTimeState]);\r\n    ///https://api.coinbase.com/v2/prices/ETH-CAD/spot retrieve ETH spot price in CAD\r\n    useEffect(()=>{\r\n        setEthState({loading: true});//going to load data from external api \r\n        const apiUrlEth = 'https://api.coinbase.com/v2/prices/ETH-CAD/spot';\r\n        fetch(apiUrlEth)\r\n            .then((res)=> res.json()) //returns a promise converted to .json\r\n            .then((eth)=> {\r\n                setEthState({loading:false, eth: eth.data.amount});\r\n            });\r\n    },[setEthState]);\r\n    return(\r\n        <div>\r\n            <ListLoading isLoading={cryptoState.loading} cur={cryptoState.cur} time={timeState.time} eth={ethState.eth} rate={props.rate} planted={props.planted}/>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Crypto;","import React, {useEffect, useState} from 'react';\r\n\r\nfunction Total(props){\r\n    const rateInt= parseInt(props.rate);\r\n    const plantedInt= parseInt(props.planted);\r\n    const dollarDue= rateInt*.01*plantedInt;\r\n    const dollarDueRounded= dollarDue.toFixed(2);\r\n   \r\n    return(\r\n        <div>\r\n            <h3 className=\"red\">Amount Due in CAD: ${dollarDueRounded}</h3>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Total;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Crypto from \"../Crypto\";\r\nimport Total from \"./Total\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\nexport default function Pay(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newInputs, setNewInputs] = useState('');\r\n    const [due, setDue] = useState(false);\r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef = useRef(null);\r\n    const wasEditing = usePrevious(isEditing);\r\n\r\n    function handleChange(e) {\r\n        const name = (e.target.name);\r\n        const value = (e.target.value);\r\n        setNewInputs(values=>({...values,[name]:value}));\r\n    }\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editInvoice(props.id, newInputs.name, newInputs.planted);\r\n        setNewInputs(\"\");\r\n        setEditing(false);\r\n    }\r\n    const editingTemplate = ( \r\n        <form className = \"pay-form\" onSubmit = { handleSubmit } >\r\n            <div className = \"pay-card\" >\r\n                <label className = \"pay-label\" htmlFor = { props.id } >\r\n                    New name for { props.name } \r\n                </label> \r\n                <input \r\n                type = \"text\" \r\n                id = { props.id } \r\n                className = \"pay-text\" \r\n                name = \"name\"\r\n                value = { newInputs.name } \r\n                onChange = { handleChange } \r\n                ref = { editFieldRef }/> \r\n                <label className = \"pay-label\" htmlFor = { props.id } >\r\n                    New total Planted \r\n                </label> \r\n                <input \r\n                id = { props.id } \r\n                className = \"pay-text\" \r\n                type = \"text\" \r\n                value = { newInputs.planted } \r\n                onChange = { handleChange } \r\n                ref = { editFieldRef }/> \r\n                \r\n                </div> \r\n                <div className = \"btn\" >\r\n                <button type = \"button\" className = \"btn pay-cancel\" onClick = {() => setEditing(false) }>\r\n                    Cancel \r\n                <span className = \"hide\" > editing { props.name } </span> \r\n                </button> \r\n                <button type = \"submit\" className = \"btn btn__primary pay-edit\" >Save <span className = \"hide\" > edited info for { props.name } </span> \r\n                </button>  \r\n            </div> \r\n        </form>\r\n    );\r\n    const viewTemplate = ( \r\n        <div className = \"card\">\r\n            <div className = { `c-cb ${due ? 'due' : ''}` } >\r\n                <h2>{props.name}&nbsp;Invoice</h2>\r\n                <h4>Tree Rate:&nbsp;{props.rate}cents/tree</h4>\r\n                <h4>Total Planted:&nbsp;{props.planted} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stock Planted: {props.species}</h4>\r\n                <h3>Payment Options:</h3>\r\n                <Total rate={props.rate} planted={props.planted}/>\r\n                <Crypto rate={props.rate} planted={props.planted}/>\r\n                \r\n                <button type = \"button\" className = \"submit-Invoice\" onClick = {() => props.toggleInvoiceSubmitted(props.id) } >\r\n                    Submit Invoice\r\n                </button>\r\n                <br />\r\n                </div> \r\n                <div className = \"btns\" >\r\n                <button type = \"button\" className = \"edit-btn\" onClick = {() => setEditing(true) } ref = { editButtonRef } >\r\n                Edit \r\n                <span className = \"hide\" > { props.name } </span> \r\n                </button> \r\n                <button type = \"button\" className = \"delete-btn\"  onClick = {() => props.deleteInvoice(props.id) } >\r\n                Mark as paid and remove \r\n                <span className = \"hide\" > { props.name } </span> \r\n                </button> \r\n                {/* <button type = \"button\" className = \"mark-due-btn\" onClick = {() => setDue(!due) } > Invoice Due </button>  */}\r\n            </div> \r\n        </div>\r\n    );\r\n    useEffect(() => {\r\n        if (!wasEditing && isEditing) {\r\n            editFieldRef.current.focus();\r\n        }\r\n        if (wasEditing && !isEditing) {\r\n            editButtonRef.current.focus();\r\n        }\r\n    }, [wasEditing, isEditing]);\r\n    return <li className = \"pay\" > { isEditing ? editingTemplate : viewTemplate } </li>;\r\n}","import React, { useState, useRef, useEffect, useContext} from \"react\";//component = router\r\nimport Form from \"./Form\";\r\nimport FilterButton from \"./FilterButton\";\r\nimport StockList from \"./StockList\";\r\nimport Pay from \"./Pay\";\r\nimport { nanoid } from \"nanoid\";\r\nimport {StockContext} from \"../../StockContext\"\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n \r\nconst FILTER_MAP = {\r\n    All: () => true,\r\n    Active: invoice => !invoice.submitted,\r\n    Submitted: invoice => invoice.submitted\r\n};\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction InvoiceForm(props) {\r\n    const [stocks, setStock] = useContext(StockContext);\r\n    const [invoices, setInvoices] = useState([]);\r\n    const [filter, setFilter] = useState('All'); //hook to read and set new filter\r\n\r\n    useEffect(() => {\r\n        //gets the list of invoices from localStorage and updates the state(setInvoices)\r\n        const data = localStorage.getItem('list');\r\n        if (data) {\r\n            setInvoices(JSON.parse(data));\r\n        }\r\n    }, []);\r\n\r\n    //local storage to persist state. \r\n    useEffect(() => {\r\n        localStorage.setItem('list', JSON.stringify(invoices));\r\n    }, [invoices])\r\n\r\n    function addInvoice(inputs) {\r\n        const newInvoice = { id: \"pay-\" + nanoid(), name: inputs.blockName, planted: inputs.planted, species: inputs.species, rate: inputs.rate, submitted: false };\r\n        setInvoices([...invoices, newInvoice]);\r\n    }\r\n    function deleteInvoice(id) {\r\n        const remainingInvoices = invoices.filter(invoice => id !== invoice.id);\r\n        setInvoices(remainingInvoices);\r\n    }\r\n    function clearInvoices() {\r\n        localStorage.clear();\r\n        setInvoices([]);\r\n    }\r\n    function editInvoice(id, newName, newPlanted, newRate) {\r\n        const editedInvoiceList = invoices.map(invoice => {\r\n            if (id === invoice.id) {\r\n                return {...invoice, name: newName, planted: newPlanted, rate: newRate}\r\n            }\r\n            return invoice;\r\n        });\r\n        setInvoices(editedInvoiceList);\r\n    }\r\n    function toggleInvoiceSubmitted(id) {\r\n        const updatedInvoices = invoices.map(invoice => {\r\n            if (id === invoice.id) {\r\n                return {...invoice, submitted: !invoice.submitted }\r\n            }\r\n            return invoice;\r\n        });\r\n        setInvoices(updatedInvoices);\r\n    }\r\n\r\n    const invoiceList = invoices.filter(FILTER_MAP[filter]).map(invoice => ( <\r\n        Pay id = { invoice.id }\r\n        name = { invoice.name }\r\n        planted = {invoice.planted}\r\n        species ={invoice.species}\r\n        rate = {invoice.rate}\r\n        submitted = { invoice.submitted }\r\n        key = { invoice.id }\r\n        toggleInvoiceSubmitted = { toggleInvoiceSubmitted }\r\n        deleteInvoice = { deleteInvoice }\r\n        editInvoice = { editInvoice }\r\n        />\r\n    ));\r\n    const filterList = FILTER_NAMES.map(name => ( <\r\n        FilterButton key = { name }\r\n        name = { name }\r\n        isPressed = { name === filter }\r\n        setFilter = { setFilter }\r\n        />\r\n    ));\r\n\r\n    const invoicesNoun = invoiceList.length !== 1 ? 'invoices' : 'invoice';\r\n    const headingText = `${invoiceList.length} ${invoicesNoun} remaining`;\r\n    const listHeadingRef = useRef(null);\r\n    const prevInvoiceLength = usePrevious(invoices.length);\r\n    useEffect(() => {\r\n        if (invoices.length - prevInvoiceLength === -1) {\r\n            listHeadingRef.current.focus();\r\n        }\r\n    }, [invoices.length, prevInvoiceLength]);\r\n    return (\r\n        <main>\r\n            <div className=\"invoice-form\">\r\n         \r\n            <h1>BlockPay</h1>\r\n            \r\n            <Form addInvoice={addInvoice} />\r\n            <div >\r\n                {filterList}\r\n                <button type = \"button\" className = \"btn\" onClick = {() => clearInvoices() } > Clear All Invoices </button>\r\n            </div>\r\n            <h2 id=\"invoice-heading\" tabIndex=\"-1\" ref={listHeadingRef}>{headingText}</h2>\r\n            <ul\r\n                role=\"list\"\r\n                className=\"pay-list\"\r\n            >\r\n                {invoiceList}\r\n            </ul>\r\n            <StockList />\r\n            </div>\r\n        </main>\r\n      );\r\n}\r\n\r\nexport default InvoiceForm;","import React, { useEffect } from \"react\";\r\nimport InvoiceForm from \"./InvoiceForm\";\r\nimport '../../App.css'; \r\n\r\nfunction ContractorHome() {\r\n      \r\n    return (\r\n        <main>\r\n            <div className=\"home\">\r\n                <h1>Contractor Home:</h1>\r\n                <InvoiceForm />\r\n            </div>\r\n        </main>\r\n      );\r\n\r\n}\r\n\r\nexport default ContractorHome;","import React, { useEffect } from \"react\";\r\n\r\nfunction ClientHome() {\r\n    \r\n    return (\r\n        <main>\r\n            <div className=\"home\">\r\n                <h1>Client Home Under Development:</h1>\r\n            </div>\r\n        </main>\r\n      );\r\n\r\n}\r\n\r\nexport default ClientHome;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <nav className=\"mainNav\">\r\n            <Link className=\"navBar\" to=\"/\">Home</Link>\r\n            <Link className=\"navBar\" to=\"/Documentation\">Documentation</Link>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport '../index.css';\r\n\r\nfunction Home() {\r\n    return (\r\n        <main>\r\n            <div className=\"homePortalDiv\">\r\n                <h2>Select from Client or Contractor Portal:</h2>\r\n                <Link underline=\"none\" className=\"homePortal1\" to=\"/ClientView/ClientHome\">Client Portal</Link> \r\n                <Link className=\"homePortal2\" to=\"/ContractorView/Home\">Contractor Portal</Link>\r\n            </div>\r\n        </main>\r\n      );\r\n\r\n}\r\nexport default Home;\r\n\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport \"./App.css\";\nimport Documentation from './components/Documentation';\nimport ContractorHome from './components/ContractorView/Home';\nimport ClientHome from './components/ClientView/ClientHome';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport {StockProvider} from \"./StockContext\";\n\nfunction App(props) {\n\n  return (\n    <StockProvider>\n    <div>\n      <Navbar/>\n        <Switch>\n          <Route path=\"/ContractorView/Home\" component={ContractorHome} />\n          <Route path=\"/ClientView/ClientHome\" component={ClientHome} />\n          <Route path=\"/documentation\" component={Documentation} />\n          <Route path=\"/\" component={Home} exact />\n          <Route component={Error} />\n        </Switch>\n    </div>\n    </StockProvider>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import {createStore} from 'redux';\n//import allReducers from './reducers';\n// import { Provider } from 'react-redux';//wrapping the app in the provider allows the entire app access to store\nimport {BrowserRouter} from 'react-router-dom';\n\n// const store= createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n     {/* // <Provider store={store}> */}\n        <App />\n      {/* //</Provider> */}\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}